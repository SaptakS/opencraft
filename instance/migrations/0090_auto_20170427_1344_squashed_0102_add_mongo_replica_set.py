# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2018-05-01 17:11
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django_extensions.db.fields
import django_extensions.db.fields.json
import functools
import instance.models.load_balancer
import instance.models.mixins.database
import instance.models.mixins.rabbitmq
import instance.models.openedx_appserver
import instance.models.utils


def populate_name(apps, schema_editor):
    model = apps.get_model('instance', 'RabbitMQServer')
    for row in model.objects.all():
        row.name = row.instance_host
        row.save()


class Migration(migrations.Migration):

    replaces = [('instance', '0090_auto_20170427_1344'), ('instance', '0091_support_multiple_rabbitmq_servers'), ('instance', '0092_rabbitmq_populate_name'), ('instance', '0093_rabbitmq_remove_blank_name'), ('instance', '0094_watch_sandbox_team'), ('instance', '0095_auto_20170925_0108'), ('instance', '0096_openedxappserver_configuration_theme_settings'), ('instance', '0096_load_balancer_configuration_version'), ('instance', '0097_merge_20171102_2252'), ('instance', '0098_openedxinstance_deploy_simpletheme'), ('instance', '0099_auto_20171103_1134'), ('instance', '0100_decline_new_clients_backends_default'), ('instance', '0101_auto_20180410_1537'), ('instance', '0102_add_mongo_replica_set')]

    dependencies = [
        ('instance', '0089_auto_20170427_1333'),
    ]

    operations = [
        migrations.AlterField(
            model_name='openedxinstance',
            name='internal_discovery_domain',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.AlterField(
            model_name='openedxinstance',
            name='internal_ecommerce_domain',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.CreateModel(
            name='RabbitMQServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(blank=True, max_length=250)),
                ('description', models.CharField(blank=True, max_length=250)),
                ('api_url', models.URLField(unique=True)),
                ('admin_username', models.CharField(max_length=64)),
                ('admin_password', models.CharField(max_length=128)),
                ('instance_host', models.CharField(max_length=128)),
                ('instance_port', models.PositiveIntegerField(default=5671)),
                ('accepts_new_clients', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'RabbitMQ Server',
            },
            bases=(instance.models.utils.ValidateModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='openedxinstance',
            name='rabbitmq_server',
            field=models.ForeignKey(blank=True, default=instance.models.mixins.rabbitmq.select_random_rabbitmq_server, null=True, on_delete=django.db.models.deletion.PROTECT, to='instance.RabbitMQServer'),
        ),
        migrations.RunPython(
            code=populate_name,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='rabbitmqserver',
            name='name',
            field=models.CharField(max_length=250),
        ),
        migrations.AlterField(
            model_name='openedxappserver',
            name='github_admin_organizations',
            field=django_extensions.db.fields.json.JSONField(blank=True, default=[], help_text='A list of GitHub organizations; the members of the "Sandbox" team in these organizations will be given SSH admin access to this instance\'s VMs.', max_length=256),
        ),
        migrations.AlterField(
            model_name='openedxinstance',
            name='github_admin_organizations',
            field=django_extensions.db.fields.json.JSONField(blank=True, default=[], help_text='A list of GitHub organizations; the members of the "Sandbox" team in these organizations will be given SSH admin access to this instance\'s VMs.', max_length=256),
        ),
        migrations.AlterField(
            model_name='openedxappserver',
            name='openstack_server_base_image',
            field=django_extensions.db.fields.json.JSONField(blank=True, default=functools.partial(instance.models.utils._get_setting, *('OPENSTACK_SANDBOX_BASE_IMAGE',), **{}), help_text='JSON openstack base image selector, e.g. {"name": "xenial-16.04-unmodified"} Defaults to settings.OPENSTACK_SANDBOX_BASE_IMAGE on server creation.', null=True),
        ),
        migrations.AlterField(
            model_name='openedxinstance',
            name='openstack_server_base_image',
            field=django_extensions.db.fields.json.JSONField(blank=True, default=functools.partial(instance.models.utils._get_setting, *('OPENSTACK_SANDBOX_BASE_IMAGE',), **{}), help_text='JSON openstack base image selector, e.g. {"name": "xenial-16.04-unmodified"} Defaults to settings.OPENSTACK_SANDBOX_BASE_IMAGE on server creation.', null=True),
        ),
        migrations.AddField(
            model_name='openedxappserver',
            name='configuration_theme_settings',
            field=models.TextField(blank=True, help_text='YAML vars for theme configuration'),
        ),
        migrations.AddField(
            model_name='loadbalancingserver',
            name='configuration_version',
            field=models.PositiveIntegerField(default=1, help_text='The current version of configuration for this load balancer. The version value is the total number of requests ever made to reconfigure the load balancer.'),
        ),
        migrations.AddField(
            model_name='loadbalancingserver',
            name='deployed_configuration_version',
            field=models.PositiveIntegerField(default=1, help_text='The currently active configuration version of the load balancer. If it is less than the configuration version, the load balancer is dirty. If it is equal to it, then no new reconfiguration is currently required.'),
        ),
        migrations.AlterField(
            model_name='loadbalancingserver',
            name='accepts_new_backends',
            field=models.BooleanField(default=True, help_text='Whether new backends can be assigned to this load-balancing server.'),
        ),
        migrations.AlterField(
            model_name='loadbalancingserver',
            name='fragment_name_postfix',
            field=models.CharField(blank=True, default=functools.partial(instance.models.load_balancer.generate_fragment_name, *(), **{'length': 8}), help_text='A random postfix appended to the haproxy configuration file names to avoid clashes between multiple instance managers (or multiple concurrently running integration tests) sharing the same load balancer.', max_length=8),
        ),
        migrations.AlterField(
            model_name='loadbalancingserver',
            name='ssh_username',
            field=models.CharField(help_text='The username used to SSH into the server.', max_length=32),
        ),
        migrations.AddField(
            model_name='openedxinstance',
            name='deploy_simpletheme',
            field=models.BooleanField(default=False, help_text='If set to True, new appservers will use theme settings from the beta application form, if available. A basic theme will be deployed through simple_theme and it may  change colors and images. If set to False, no theme will be created and the default Open edX theme will be used; this is recommended for instances registered before the theme fields were available.', verbose_name='Deploy simple_theme'),
        ),
        migrations.AlterField(
            model_name='loadbalancingserver',
            name='accepts_new_backends',
            field=models.BooleanField(default=False, help_text='Whether new backends can be assigned to this load-balancing server.'),
        ),
        migrations.AlterField(
            model_name='mongodbserver',
            name='accepts_new_clients',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='mysqlserver',
            name='accepts_new_clients',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='rabbitmqserver',
            name='accepts_new_clients',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='instancereference',
            name='is_archived',
            field=models.BooleanField(default=False, help_text='When this Instance is no longer needed, it is shut down and marked as archived. Archived instances do not appear in the list of instances, but their data, logs, and settings are preserved (including e.g. all MySQL and MongoDB data).<br/><strong>Note: You currently cannot archive an instance from the admin panel. You can however un-archive an instance that was already archived.</strong>'),
        ),
        migrations.CreateModel(
            name='MongoDBReplicaSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(blank=True, help_text='Must match name in replicaset_name on a MongoDB server.', max_length=250)),
                ('description', models.CharField(blank=True, max_length=250)),
            ],
            options={
                'verbose_name': 'MongoDB Replica Set',
            },
        ),
        migrations.AddField(
            model_name='mongodbserver',
            name='replica_set',
            field=models.ForeignKey(blank=True, help_text='Replica Set to which the server belongs.', null=True, on_delete=django.db.models.deletion.CASCADE, to='instance.MongoDBReplicaSet'),
        ),
        migrations.AddField(
            model_name='mongodbserver',
            name='primary',
            field=models.BooleanField(default=False, help_text='Indicates if the server is the primary server on a Replica Set, only applies when replica_set is set.'),
        ),
        migrations.AddField(
            model_name='openedxinstance',
            name='mongodb_replica_set',
            field=models.ForeignKey(blank=True, default=instance.models.mixins.database.select_random_mongodb_replica_set, null=True, on_delete=django.db.models.deletion.PROTECT, to='instance.MongoDBReplicaSet'),
        ),
        migrations.AlterField(
            model_name='openedxinstance',
            name='mongodb_server',
            field=models.ForeignKey(blank=True, default=instance.models.mixins.database.select_random_mongodb_server, null=True, on_delete=django.db.models.deletion.PROTECT, to='instance.MongoDBServer'),
        ),
    ]
