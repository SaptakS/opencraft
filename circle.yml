version: 2.1
jobs:
  build:
    docker:
      - image: circleci/python:3.5.4-browsers
        environment:
          DEBUG: 'true'
          DEFAULT_FORK: 'open-craft/edx-platform'
          LOAD_BALANCER_FRAGMENT_NAME_PREFIX: 'integration-'
          TEST_RUNNER: 'opencraft.tests.utils.CircleCIParallelTestRunner'
      - image: redis
      - image: mongo:3.2-jessie
      - image: "circleci/mysql:5"
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: True
      - image: circleci/postgres:10.1-alpine
        environment:
          PG_HOST: 127.0.0.1
          POSTGRES_USER: circleci
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - restore_cache:
          key: dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 10s
      - run:
          name: Wait for Postgres
          command: dockerize -wait tcp://localhost:5432 -timeout 10s
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://localhost:3306 -timeout 10s
      - run:
          name: Wait for MongoDB
          command: dockerize -wait tcp://localhost:27017 -timeout 10s
      - run:
          command: SHARD=<<parameters.shard>> echo $SHARD
          #- run:
          #    name: Install Dependencies
          #    command: |
          #      python3 -m venv venv
          #      . venv/bin/activate
          #      pip install --upgrade pip
          #      pip install --upgrade virtualenv
          #      # The jessie-updates and jessie-backports areas are now removed from the repositories. So
          #      # the lines corresponding to those areas have to be removed to fix the resulting errors.
          #      # This can be removed after upgrading to the image based on Debian Stretch.
          #      sudo sed -i '/jessie-updates/d' /etc/apt/sources.list
          #      sudo sed -i '/jessie-backports/d' /etc/apt/sources.list
          #      sudo apt-get update; sudo apt-get install python2.7-dev
          #      sudo apt-get install mysql-client
          #      pip install -r requirements.txt
          #      pip install -r cleanup_utils/requirements.txt
          #      sudo apt-get install postgresql-client
          #      sudo apt-get install unzip
          #      sudo wget -P /tmp https://releases.hashicorp.com/consul/1.2.1/consul_1.2.1_linux_amd64.zip
          #- run:
          #    name: Run Consul
          #    command: |
          #      sudo unzip /tmp/consul_1.2.1_linux_amd64.zip -d /usr/local/bin
          #      consul agent -dev
          #    background: true
          #- save_cache:
          #    key: dependencies-{{ checksum "requirements.txt" }}
          #    paths:
          #      - "venv"
          #- run:
          #    name: Create Database
          #    command: make create_db
          #- run:
          #    name: Run Tests
          #    command: |
          #      . venv/bin/activate
          #      bin/run-circleci-tests
          #    no_output_timeout: 47m
          #    environment:
          #      ANSIBLE_HOST_KEY_CHECKING: False
  coverage:
    docker:
        - image: circleci/python:3.5.4
    steps:
        - run:
            command: echo "Code Coverage"
  cleanup:
    docker:
      - image: circleci/python:3.5.4
        environment:
          LOAD_BALANCER_FRAGMENT_NAME_PREFIX: 'integration-'
          DJANGO_SETTINGS_MODULE: 'opencraft.settings'
    steps:
      - checkout
      - restore_cache:
          key: dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            sudo apt-get install libpython2.7-dev
            pip install -r cleanup_utils/requirements.txt
      - run:
          name: Cleanup
          command: |
            . venv/bin/activate
            make test.integration_cleanup
          no_output_timeout: 20m
          when: always
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
        - build:
            name: run_tests_0
            shard: 0
        - build:
            name: run_tests_1
            shard: 1
        - build:
            name: run_tests_2
            shard: 2
        - build:
            name: run_tests_3
            shard: 3
        - coverage:
            requires:
                - run_tests_0
                - run_tests_1
                - run_tests_2
                - run_tests_3
